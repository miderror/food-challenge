import asyncio
import logging
from datetime import timedelta

from aiogram import Bot
from celery import shared_task
from django.conf import settings
from django.db import transaction
from django.utils import timezone

from .models import User

logger = logging.getLogger(__name__)


@shared_task
def send_challenge_results_task(user_id: int):
    asyncio.run(send_results_async(user_id))


async def send_results_async(user_id: int):
    try:
        user = await User.objects.aget(telegram_id=user_id)
        bot = Bot(token=settings.BOT_TOKEN)

        days_spent = (user.challenge_end_date - user.date_joined).days + 1

        if user.challenge_status == User.ChallengeStatus.COMPLETED:
            text = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ ¬´400 –ø—Ä–æ–¥—É–∫—Ç–æ–≤¬ª!\n\n"
                f"üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚úÖ –°—ä–µ–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.final_eaten_count}\n"
                f"‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: {days_spent} –¥–Ω–µ–π\n\n"
                f"–≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –í—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª–∏ —Å–≤–æ–π —Ä–∞—Ü–∏–æ–Ω. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            )
        elif user.challenge_status == User.ChallengeStatus.EXPIRED:
            text = (
                f"üèÅ –ß–µ–ª–ª–µ–Ω–¥–∂ ¬´400 –ø—Ä–æ–¥—É–∫—Ç–æ–≤¬ª –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ü—Ä–æ—à–µ–ª –≥–æ–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏.\n\n"
                f"üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚úÖ –°—ä–µ–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.final_eaten_count} –∏–∑ 400\n"
                f"‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: 365 –¥–Ω–µ–π\n\n"
                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –î–∞–∂–µ –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ. –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ!"
            )
        else:
            return

        await bot.send_message(user.telegram_id, text)
        await bot.session.close()
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ–ª–ª–µ–Ω–¥–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except User.DoesNotExist:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
        )


@shared_task
def check_expired_challenges():
    CHALLENGE_DURATION_DAYS = 365
    expiration_date = timezone.now() - timedelta(days=CHALLENGE_DURATION_DAYS)

    expired_users = User.objects.filter(
        challenge_status=User.ChallengeStatus.ACTIVE, date_joined__lte=expiration_date
    )

    for user in expired_users:
        eaten_count = user.eaten_products.count()
        user.challenge_status = User.ChallengeStatus.EXPIRED
        user.challenge_end_date = user.date_joined + timedelta(
            days=CHALLENGE_DURATION_DAYS
        )
        user.final_eaten_count = eaten_count
        user.save(
            update_fields=[
                "challenge_status",
                "challenge_end_date",
                "final_eaten_count",
            ]
        )

        logger.info(
            f"–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∏—Å—Ç–µ–∫. –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )
        transaction.on_commit(
            lambda: send_challenge_results_task.delay(user.telegram_id)
        )
